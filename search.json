[
  {
    "objectID": "posts/identifying_outliers/harvest_data_outlier.html",
    "href": "posts/identifying_outliers/harvest_data_outlier.html",
    "title": "Identifying and Managing Outliers in Harvest Data for Improved Analysis",
    "section": "",
    "text": "This strategy focuses on identifying and handling outliers in the harvest dataset to ensure the accuracy and interpretability of the analysis. By detecting and managing extreme data points, we can produce visualizations and insights that are both meaningful and easy to understand.\n\n\n\nOutliers in the dataset, whether they are abnormally large or small values, can skew the results and obscure meaningful trends. These outliers may result from:\n\nData entry errors.\nUnusual farming conditions.\nInconsistent definitions of farm areas or crop yields.\n\nTo address these challenges, we implemented a structured approach to detect and handle outliers in the harvest dataset. This process enables us to clean the data and produce insightful and accurate visualizations that highlight key trends in agricultural yields.\n\n\n\n\n\n\nWe utilized the following key columns from the harvest dataset:\n\nactual_quantity: The actual yield from each farm location.\nlocation_area_ha: The area of the location in hectares.\ntype: The type of location (e.g., field, garden, greenhouse).\ncrop_group: The broader category of the crop (e.g., Vegetables and melons, Cereals).\nfarm_id: The unique identifier for each farm.\n\n\n\n\n\n\n\n\nRemove rows with missing values in critical columns (actual_quantity, location_area_ha) to ensure the dataset is complete.\n\n\n\n\n\nAdd a derived column, yield_per_ha, to calculate productivity using the formula: [ = ]\n\n\n\n\n\nCompute the Interquartile Range (IQR) for actual_quantity within each crop_group: [ = Q3 - Q1 ]\nDefine lower and upper bounds: [ = Q1 - 1.5 ] [ = Q3 + 1.5 ]\nRemove data points outside these bounds.\n\n\n\n\n\nApply domain-specific thresholds for further outlier detection, as detailed below:\n\n\n\n\nField:\n\nLocations with location_area_ha &gt;= 160 or actual_quantity &gt;= 300,000 were flagged as outliers and removed.\n\nGarden:\n\nLocations with location_area_ha &gt;= 0.8 or actual_quantity &gt;= 1,500 were flagged as outliers and removed.\n\nGreenhouse:\n\nLocations with location_area_ha &gt;= 0.1 or actual_quantity &gt;= 200 were flagged as outliers and removed.\n\n\n\n\n\n\nFruit and Nuts:\n\nLocations with location_area_ha &lt; 10 and actual_quantity &lt;= 250 were removed.\n\nVegetables and Melons:\n\nLocations with location_area_ha &lt; 50 and actual_quantity &lt; 50 were removed.\n\nOilseed Crops and Oleaginous Fruits:\n\nLocations with location_area_ha &lt; 2 and actual_quantity &lt; 120 were removed.\n\nOther Crops:\n\nLocations with location_area_ha &lt; 50 and actual_quantity &lt; 50 were removed.\n\nStimulant, Spice, and Aromatic Crops:\n\nLocations with location_area_ha &lt; 15 and actual_quantity &lt;= 220 were removed.\n\nSugar Crops:\n\nLocations with location_area_ha &lt; 2 and actual_quantity &lt;= 1,000 were removed.\n\nCereals:\n\nLocations with location_area_ha &lt;= 15 and actual_quantity &lt;= 3,000 were removed.\n\nLeguminous Crops:\n\nLocations with location_area_ha &lt;= 6 and actual_quantity &lt;= 200 were removed.\n\n\n\n\n\n\n\nFor some crop groups (e.g., High Starch Root/Tuber Crops, Potatoes and Yams, Beverage and Spice Crops):\n\nCalculate the mean and standard deviation.\nRetain data points within: [ ]\n\n\n\n\n\n\n\n\n\n\n\nBy Location Type:\n\nShow the distribution of actual_quantity across field, garden, and greenhouse.\nHighlight how outliers affect the spread and central tendency.\n\nBy Crop Group:\n\nCompare actual_quantity across different crop_group values to identify trends and variability.\n\n\n\n\n\n\nBy Location Type:\n\nPlot location_area_ha vs. actual_quantity for each location type.\nHighlight the relationship between farm size and yield for field, garden, and greenhouse.\n\nBy Crop Group:\n\nShow the distribution of actual_quantity vs. location_area_ha for each crop group, distinguishing between types (e.g., Field vs. Garden).\n\n\n\n\n\n\nBy Location Type:\n\nShow frequency distributions of actual_quantity for field, garden, and greenhouse before and after outlier removal.\n\nBy Crop Group:\n\nDisplay frequency distributions of actual_quantity within each crop group before and after outlier removal.\n\n\n\n\n\n\n\n\nImproved Data Quality:\n\nOutliers that distort trends and visualizations are removed.\n\nTargeted Outlier Detection:\n\nCombines general statistical methods (e.g., IQR) with specific thresholds based on domain knowledge.\n\nEnhanced Visualizations:\n\nProduces accurate and meaningful visualizations, enabling better decision-making.\n\n\n\n\n\n\nThis approach addresses outliers systematically, ensuring the dataset represents typical trends while minimizing distortions from extreme values. By combining IQR-based filtering, manual thresholds, and advanced statistical methods, we enhanced the quality of the dataset and produced clear, reliable visualizations for analysis. This comprehensive strategy provides a strong foundation for understanding agricultural yields across diverse farm locations and crop groups."
  },
  {
    "objectID": "posts/identifying_outliers/harvest_data_outlier.html#rationale",
    "href": "posts/identifying_outliers/harvest_data_outlier.html#rationale",
    "title": "Identifying and Managing Outliers in Harvest Data for Improved Analysis",
    "section": "",
    "text": "Outliers in the dataset, whether they are abnormally large or small values, can skew the results and obscure meaningful trends. These outliers may result from:\n\nData entry errors.\nUnusual farming conditions.\nInconsistent definitions of farm areas or crop yields.\n\nTo address these challenges, we implemented a structured approach to detect and handle outliers in the harvest dataset. This process enables us to clean the data and produce insightful and accurate visualizations that highlight key trends in agricultural yields."
  },
  {
    "objectID": "posts/identifying_outliers/harvest_data_outlier.html#implementation-strategy",
    "href": "posts/identifying_outliers/harvest_data_outlier.html#implementation-strategy",
    "title": "Identifying and Managing Outliers in Harvest Data for Improved Analysis",
    "section": "",
    "text": "We utilized the following key columns from the harvest dataset:\n\nactual_quantity: The actual yield from each farm location.\nlocation_area_ha: The area of the location in hectares.\ntype: The type of location (e.g., field, garden, greenhouse).\ncrop_group: The broader category of the crop (e.g., Vegetables and melons, Cereals).\nfarm_id: The unique identifier for each farm.\n\n\n\n\n\n\n\n\nRemove rows with missing values in critical columns (actual_quantity, location_area_ha) to ensure the dataset is complete.\n\n\n\n\n\nAdd a derived column, yield_per_ha, to calculate productivity using the formula: [ = ]\n\n\n\n\n\nCompute the Interquartile Range (IQR) for actual_quantity within each crop_group: [ = Q3 - Q1 ]\nDefine lower and upper bounds: [ = Q1 - 1.5 ] [ = Q3 + 1.5 ]\nRemove data points outside these bounds.\n\n\n\n\n\nApply domain-specific thresholds for further outlier detection, as detailed below:\n\n\n\n\nField:\n\nLocations with location_area_ha &gt;= 160 or actual_quantity &gt;= 300,000 were flagged as outliers and removed.\n\nGarden:\n\nLocations with location_area_ha &gt;= 0.8 or actual_quantity &gt;= 1,500 were flagged as outliers and removed.\n\nGreenhouse:\n\nLocations with location_area_ha &gt;= 0.1 or actual_quantity &gt;= 200 were flagged as outliers and removed.\n\n\n\n\n\n\nFruit and Nuts:\n\nLocations with location_area_ha &lt; 10 and actual_quantity &lt;= 250 were removed.\n\nVegetables and Melons:\n\nLocations with location_area_ha &lt; 50 and actual_quantity &lt; 50 were removed.\n\nOilseed Crops and Oleaginous Fruits:\n\nLocations with location_area_ha &lt; 2 and actual_quantity &lt; 120 were removed.\n\nOther Crops:\n\nLocations with location_area_ha &lt; 50 and actual_quantity &lt; 50 were removed.\n\nStimulant, Spice, and Aromatic Crops:\n\nLocations with location_area_ha &lt; 15 and actual_quantity &lt;= 220 were removed.\n\nSugar Crops:\n\nLocations with location_area_ha &lt; 2 and actual_quantity &lt;= 1,000 were removed.\n\nCereals:\n\nLocations with location_area_ha &lt;= 15 and actual_quantity &lt;= 3,000 were removed.\n\nLeguminous Crops:\n\nLocations with location_area_ha &lt;= 6 and actual_quantity &lt;= 200 were removed.\n\n\n\n\n\n\n\nFor some crop groups (e.g., High Starch Root/Tuber Crops, Potatoes and Yams, Beverage and Spice Crops):\n\nCalculate the mean and standard deviation.\nRetain data points within: [ ]"
  },
  {
    "objectID": "posts/identifying_outliers/harvest_data_outlier.html#visualizations",
    "href": "posts/identifying_outliers/harvest_data_outlier.html#visualizations",
    "title": "Identifying and Managing Outliers in Harvest Data for Improved Analysis",
    "section": "",
    "text": "By Location Type:\n\nShow the distribution of actual_quantity across field, garden, and greenhouse.\nHighlight how outliers affect the spread and central tendency.\n\nBy Crop Group:\n\nCompare actual_quantity across different crop_group values to identify trends and variability.\n\n\n\n\n\n\nBy Location Type:\n\nPlot location_area_ha vs. actual_quantity for each location type.\nHighlight the relationship between farm size and yield for field, garden, and greenhouse.\n\nBy Crop Group:\n\nShow the distribution of actual_quantity vs. location_area_ha for each crop group, distinguishing between types (e.g., Field vs. Garden).\n\n\n\n\n\n\nBy Location Type:\n\nShow frequency distributions of actual_quantity for field, garden, and greenhouse before and after outlier removal.\n\nBy Crop Group:\n\nDisplay frequency distributions of actual_quantity within each crop group before and after outlier removal."
  },
  {
    "objectID": "posts/identifying_outliers/harvest_data_outlier.html#benefits-of-this-strategy",
    "href": "posts/identifying_outliers/harvest_data_outlier.html#benefits-of-this-strategy",
    "title": "Identifying and Managing Outliers in Harvest Data for Improved Analysis",
    "section": "",
    "text": "Improved Data Quality:\n\nOutliers that distort trends and visualizations are removed.\n\nTargeted Outlier Detection:\n\nCombines general statistical methods (e.g., IQR) with specific thresholds based on domain knowledge.\n\nEnhanced Visualizations:\n\nProduces accurate and meaningful visualizations, enabling better decision-making."
  },
  {
    "objectID": "posts/identifying_outliers/harvest_data_outlier.html#conclusion",
    "href": "posts/identifying_outliers/harvest_data_outlier.html#conclusion",
    "title": "Identifying and Managing Outliers in Harvest Data for Improved Analysis",
    "section": "",
    "text": "This approach addresses outliers systematically, ensuring the dataset represents typical trends while minimizing distortions from extreme values. By combining IQR-based filtering, manual thresholds, and advanced statistical methods, we enhanced the quality of the dataset and produced clear, reliable visualizations for analysis. This comprehensive strategy provides a strong foundation for understanding agricultural yields across diverse farm locations and crop groups."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "This methodology was implemented to classify farms as being located on land or in the ocean based on their geographic coordinates. This classification aimed to improve the accuracy and reliability of spatial analyses by identifying potential outliers (e.g., farms with invalid locations).\n\n\n\nIn the LiteFarm database, some farms have geographic coordinates that place them in unexpected locations, such as oceans or water bodies. While some of these farms are valid (e.g., located on small islands or near coastal boundaries), others may be due to data entry errors or inaccuracies in the mapping process. By identifying and classifying such farms, we aim to:\n\nEnsure data reliability for spatial and environmental analyses.\nExclude invalid farms to avoid skewed results.\nHighlight farms near coastlines or on small islands as potential outliers for manual review.\n\n\n\n\n\n\n\n\nThe farm data was extracted from the LiteFarm database using an SQL query.\nFilters were applied to exclude test farms and known “fake” farms, ensuring only genuine records were analyzed.\nKey attributes included:\n\nfarm_id: Unique identifier for each farm.\nfarm_name: Name of the farm.\ncountry_name: Country where the farm is located.\ngrid_points: Latitude and longitude coordinates representing the farm’s location.\n\n\n\n\n\n\nThe Natural Earth 10m Land Dataset (ne_10m_land.shp) was used for high-resolution land boundary data.\nUsing the geopandas library, the following steps were performed:\n\nPoint-in-Polygon Check: Each farm’s grid_points were converted into geographic points. These points were tested against the land polygons to determine if they fall within a land boundary.\nClassification: Farms were labeled as:\n\n“Land”: If the point fell inside a land polygon.\n“Ocean”: If the point fell outside all land polygons.\n\n\n\n\n\n\n\nA buffer of 1000 meters was added around each farm’s point to account for:\n\nMinor inaccuracies in land boundary data.\nLimited precision in geographic coordinates.\n\nIf the buffered point intersected a land polygon, the farm was classified as “Land”; otherwise, it was classified as “Ocean”.\n\n\n\n\n\nFarms labeled as “Ocean” were flagged as potential outliers.\nThese farms were compiled into a separate dataset for further inspection, as their locations were not expected to represent valid farm locations.\n\n\n\n\n\nThe flagged farms were manually inspected using the Farm Explorer tab on the LiteFarm dashboard to verify their actual locations.\nFarms that appeared to be valid (e.g., located on small islands or very close to the coast) were confirmed as legitimate but still classified as outliers due to:\n\nTheir small size or unusual location.\nPotential for producing skewed results in broader analyses.\n\n\n\n\n\n\nFarms confirmed to lie in the ocean (i.e., invalid farms) were excluded from the dataset by adding their farm_id values to an exclusion list in the SQL query.\nThis updated query ensures that all subsequent analyses and operations exclude invalid farms, improving the reliability of the dataset.\n\n\n\n\n\n\n\nLand Farms:\n\nFarms that fell within land polygons or whose buffered points intersected land boundaries.\n\nOcean Farms:\n\nFarms that fell outside land polygons and could not be confirmed as valid locations through manual inspection.\n\n\n\n\n\n\n\nValid Farms in the Ocean:\n\nSome farms initially classified as “Ocean” were located on small islands or near coastal boundaries.\nThese farms were valid but flagged as outliers due to their geographic characteristics.\n\nImpact on Analyses:\n\nExcluding farms classified as “Ocean” ensures cleaner and more reliable data for spatial analyses.\nHowever, valid farms near coastlines or on small islands may require separate consideration for specific analyses.\n\nOutliers:\n\nFarms in unusual locations (e.g., small islands or coastal areas) may produce skewed results in broader spatial analyses, especially when analyzing trends by proximity to metropolitan areas or landmass sizes.\n\n\n\n\n\n\n\nImproved Data Integrity:\n\nEnsures only valid farms are included in the dataset.\n\nAccurate Spatial Analysis:\n\nDistinguishes between farms on land and those in unexpected locations, improving analysis reliability.\n\nIdentifies Edge Cases:\n\nHighlights farms near coastlines or on small islands for manual inspection and further analysis.\n\n\n\n\n\n\n\nCoastal Farms:\n\nFarms near coastlines or on small islands are valid but may require separate handling in analyses.\n\nBoundary Precision:\n\nThe resolution of the land boundary dataset and the buffer size can influence classification results.\n\nManual Validation:\n\nWhile effective, manual inspection is time-consuming and may not scale to larger datasets.\n\n\n\n\n\n\nBy classifying farms as being located on land or in the ocean, this methodology enhances the reliability of spatial analyses and identifies outliers for further inspection. Farms near coastlines or on small islands are valid but remain flagged as outliers to ensure data consistency and accuracy in broader analyses. This process ensures cleaner, more reliable data for understanding the spatial characteristics of farms in the LiteFarm dataset."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#rationale",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#rationale",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "In the LiteFarm database, some farms have geographic coordinates that place them in unexpected locations, such as oceans or water bodies. While some of these farms are valid (e.g., located on small islands or near coastal boundaries), others may be due to data entry errors or inaccuracies in the mapping process. By identifying and classifying such farms, we aim to:\n\nEnsure data reliability for spatial and environmental analyses.\nExclude invalid farms to avoid skewed results.\nHighlight farms near coastlines or on small islands as potential outliers for manual review."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#methodology",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#methodology",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "The farm data was extracted from the LiteFarm database using an SQL query.\nFilters were applied to exclude test farms and known “fake” farms, ensuring only genuine records were analyzed.\nKey attributes included:\n\nfarm_id: Unique identifier for each farm.\nfarm_name: Name of the farm.\ncountry_name: Country where the farm is located.\ngrid_points: Latitude and longitude coordinates representing the farm’s location.\n\n\n\n\n\n\nThe Natural Earth 10m Land Dataset (ne_10m_land.shp) was used for high-resolution land boundary data.\nUsing the geopandas library, the following steps were performed:\n\nPoint-in-Polygon Check: Each farm’s grid_points were converted into geographic points. These points were tested against the land polygons to determine if they fall within a land boundary.\nClassification: Farms were labeled as:\n\n“Land”: If the point fell inside a land polygon.\n“Ocean”: If the point fell outside all land polygons.\n\n\n\n\n\n\n\nA buffer of 1000 meters was added around each farm’s point to account for:\n\nMinor inaccuracies in land boundary data.\nLimited precision in geographic coordinates.\n\nIf the buffered point intersected a land polygon, the farm was classified as “Land”; otherwise, it was classified as “Ocean”.\n\n\n\n\n\nFarms labeled as “Ocean” were flagged as potential outliers.\nThese farms were compiled into a separate dataset for further inspection, as their locations were not expected to represent valid farm locations.\n\n\n\n\n\nThe flagged farms were manually inspected using the Farm Explorer tab on the LiteFarm dashboard to verify their actual locations.\nFarms that appeared to be valid (e.g., located on small islands or very close to the coast) were confirmed as legitimate but still classified as outliers due to:\n\nTheir small size or unusual location.\nPotential for producing skewed results in broader analyses.\n\n\n\n\n\n\nFarms confirmed to lie in the ocean (i.e., invalid farms) were excluded from the dataset by adding their farm_id values to an exclusion list in the SQL query.\nThis updated query ensures that all subsequent analyses and operations exclude invalid farms, improving the reliability of the dataset."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#classification-results",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#classification-results",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "Land Farms:\n\nFarms that fell within land polygons or whose buffered points intersected land boundaries.\n\nOcean Farms:\n\nFarms that fell outside land polygons and could not be confirmed as valid locations through manual inspection."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#key-observations",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#key-observations",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "Valid Farms in the Ocean:\n\nSome farms initially classified as “Ocean” were located on small islands or near coastal boundaries.\nThese farms were valid but flagged as outliers due to their geographic characteristics.\n\nImpact on Analyses:\n\nExcluding farms classified as “Ocean” ensures cleaner and more reliable data for spatial analyses.\nHowever, valid farms near coastlines or on small islands may require separate consideration for specific analyses.\n\nOutliers:\n\nFarms in unusual locations (e.g., small islands or coastal areas) may produce skewed results in broader spatial analyses, especially when analyzing trends by proximity to metropolitan areas or landmass sizes."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#benefits-of-this-approach",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#benefits-of-this-approach",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "Improved Data Integrity:\n\nEnsures only valid farms are included in the dataset.\n\nAccurate Spatial Analysis:\n\nDistinguishes between farms on land and those in unexpected locations, improving analysis reliability.\n\nIdentifies Edge Cases:\n\nHighlights farms near coastlines or on small islands for manual inspection and further analysis."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#considerations",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#considerations",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "Coastal Farms:\n\nFarms near coastlines or on small islands are valid but may require separate handling in analyses.\n\nBoundary Precision:\n\nThe resolution of the land boundary dataset and the buffer size can influence classification results.\n\nManual Validation:\n\nWhile effective, manual inspection is time-consuming and may not scale to larger datasets."
  },
  {
    "objectID": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#conclusion",
    "href": "posts/identifying_outliers/farm_on_land_or_water_outlier.html#conclusion",
    "title": "Identifying Farms on Land or Ocean",
    "section": "",
    "text": "By classifying farms as being located on land or in the ocean, this methodology enhances the reliability of spatial analyses and identifies outliers for further inspection. Farms near coastlines or on small islands are valid but remain flagged as outliers to ensure data consistency and accuracy in broader analyses. This process ensures cleaner, more reliable data for understanding the spatial characteristics of farms in the LiteFarm dataset."
  },
  {
    "objectID": "posts/identifying_outliers/farm_area_and_perimeter_outliers.html",
    "href": "posts/identifying_outliers/farm_area_and_perimeter_outliers.html",
    "title": "LiteFarm Data Processing Guide",
    "section": "",
    "text": "Identifying and Managing Outliers in Farm Area and Perimeter Data for Enhanced Analysis\nThis strategy focuses on systematically identifying and handling outliers in farm area and perimeter data based on country and location type. By calculating and applying well-defined limits, we ensure the dataset’s integrity and reliability for producing meaningful insights and visualizations.\n\n\n\nRationale\nOutliers in area and perimeter data can arise from various sources, such as:\n\nErrors in data collection or entry.\nNatural variations in farm sizes across regions and location types.\nInclusion of atypical farms or locations, such as ceremonial areas or natural reserves.\n\nThese anomalies can distort trends, making it critical to identify and manage them. Our approach involved calculating precise bounds tailored to each country and location type, allowing for better handling of variability.\n\n\n\nImplementation Strategy\n\nData Sources\nKey columns from the dataset:\n\ncountry_name: The country where the farm is located.\ntype: The type of location (e.g., field, greenhouse, natural_area).\ntotal_area_ha: The total area of the location in hectares.\ntotal_perimeter_m: The total perimeter of the location in meters.\n\n\n\n\nSteps\n\n1. Calculate Descriptive Statistics\nWe began by analyzing the minimum, maximum, and mean values for both area and perimeter by location type across all countries. For example:\n\nFields in Brazil:\n\nMin Area: 0 ha\nMax Area: 4,247,578 ha\nMean Area: 422.44 ha\nMin Perimeter: 0 m\nMax Perimeter: 900,000 m\nMean Perimeter: 665.21 m\n\nGreenhouses in Canada:\n\nMin Area: 0.000013 ha\nMax Area: 719.07 ha\nMean Area: 1.16 ha\nMin Perimeter: 4 m\nMax Perimeter: 13,288 m\nMean Perimeter: 132.79 m\n\n\n\n\n2. Percentile-Based Thresholds\nFor each location type within a country, we calculated the 5th percentile (lower cap) and 95th percentile (upper cap) for total_area_ha and total_perimeter_m. This helped filter out extreme values at both ends of the spectrum. For instance:\n\nFields in Japan:\n\nLower Cap (Area): 0.0017 ha\nUpper Cap (Area): 2.08 ha\nLower Cap (Perimeter): 14 m\nUpper Cap (Perimeter): 947 m\n\nGreenhouses in Brazil:\n\nLower Cap (Area): 0.001 ha\nUpper Cap (Area): 0.1011 ha\nLower Cap (Perimeter): 14.55 m\nUpper Cap (Perimeter): 206 m\n\n\n\n\n3. Interquartile Range (IQR) Analysis\nTo refine our thresholds, we used the IQR method:\n\nIQR Formula: IQR=Q3−Q1 = Q3 - Q1IQR=Q3−Q1\n\nLower Bound: Q1−1.5×IQRQ1 - 1.5 Q1−1.5×IQR (set to 0 if negative).\nUpper Bound: Q3+1.5×IQRQ3 + 1.5 Q3+1.5×IQR.\n\n\nFor example:\n\nFarm Site Boundaries in Colombia:\n\nIQR Area: 0 to 19.13 ha\nIQR Perimeter: 106 to 2,998 m.\n\nResidences in the U.S.:\n\nIQR Area: 0 to 0.075 ha\nIQR Perimeter: 27 to 144 m.\n\n\n\n\n4. Merging and Combining Thresholds\nWe combined percentile-based and IQR-based thresholds to define the final limits:\n\nLower Limit: Maximum of the 5th percentile and the IQR lower bound.\nUpper Limit: Minimum of the 95th percentile, maximum value, and the IQR upper bound.\n\nFor instance:\n\nBarns in Canada:\n\nLower Area Limit: 0.0014 ha\nUpper Area Limit: 0.055 ha\nLower Perimeter Limit: 16 m\nUpper Perimeter Limit: 125.5 m.\n\n\n\n\n\n\n5. Filtering Valid and Outlier Data\nUsing the calculated limits, we filtered the dataset into:\n\nValid Data: Farms with areas and perimeters within the defined bounds.\nOutliers: Farms falling outside these bounds.\n\nFor example:\n\nValid Farms in Colombia:\n\nFarm Site Boundaries with area between 0.0471 ha and 19.13 ha, and perimeter between 106 m and 2,998 m.\n\nOutlier Farms in Japan:\n\nFields with area below 0.0017 ha or above 2.08 ha, or perimeter outside the range of 14 m to 947 m.\n\n\n\nOverlap Analysis\nWe identified farms with both valid and outlier location types, such as a valid barn but an outlier field. This provided additional insights into farms with mixed characteristics.\n\n\n\n\n\nBenefits of This Strategy\n\nImproved Data Quality: Removes inconsistent and extreme values while preserving valid variability.\nCountry-Specific Analysis: Tailored limits for each country and location type ensure cultural and geographical context is respected.\nEnhanced Visualizations: Clearer trends and relationships after outlier removal.\n\n\n\n\nConclusion\nThis approach systematically identified and managed outliers in farm area and perimeter data, balancing statistical methods (percentiles, IQR) with practical domain considerations. By merging multiple thresholds, we ensured robust and actionable results, enabling accurate analysis of agricultural patterns across diverse countries and location types."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_emails.html",
    "href": "posts/identifying_fake_farms/filter_emails.html",
    "title": "Filtering Out Farms Associated with Invalid Emails (SQL)",
    "section": "",
    "text": "In our ongoing efforts to validate farm data effectively, another crucial strategy is to filter out farms associated with invalid or non-genuine user emails. Specifically, we target emails containing the term “litefarm,” which are typically used by backend users or staff members. Excluding these farms ensures that our dataset reflects real-world farming activities and enhances the accuracy of our analyses.\n\n\nDuring the development and maintenance of the Litefarm platform, staff members and developers often create test accounts using emails that include “litefarm” in the address (e.g., test@litefarm.com). Farms associated with these accounts are usually not real and are created for testing or demonstration purposes. Including such farms in data analyses can lead to skewed results and misinformed conclusions.\n\n\n\nTo filter out farms associated with invalid emails, we join the users, userFarm, and farm tables to identify and exclude farms linked to users with emails containing “litefarm.” Below is the SQL query used to perform this filtering:\nSELECT f.*\nFROM farm f\nJOIN user_farms uf ON f.id = uf.farm_id\nJOIN users u ON uf.user_id = u.id\nWHERE LOWER(u.email) NOT LIKE '%litefarm%';\n\n\n\nTables Involved:\n\nusers: Contains user information, including email and id.\nuser_farm: Associates users with farms through user_id and farm_id.\nfarm: Contains farm details identified by fid.\n\nQuery Breakdown:\n\nSELECT f.*: Selects all columns from the farm table.\nJOIN \"user_farm\" uf ON f.id = uf.farm_id: Joins the farm and user_farm tables on farm_id to associate farms with users.\nJOIN users u ON uf.user_id = u.id: Joins the result with the users table on id to access user emails.\nWHERE LOWER(u.email) NOT LIKE '%litefarm%': Filters out farms where the associated user’s email contains “litefarm,” making the search case-insensitive with LOWER().\n\n\n\n\n\n\n\nEnhanced Data Integrity: Removes non-genuine farms associated with staff or test accounts.\nAccurate Analyses: Ensures that statistical analyses and reports are based on real farming data.\nResource Efficiency: Reduces the time and resources spent processing irrelevant data.\n\n\n\n\n\nMultiple Users per Farm: A farm might be associated with multiple users. Ensure that the farm is only excluded if all associated users have emails containing “litefarm.”\nFalse Positives: Be cautious of legitimate users whose emails might inadvertently contain “litefarm.”\n\n\n\n\nFiltering out farms associated with invalid emails is a vital step in maintaining the quality and reliability of our farm data. By implementing this SQL-based strategy, we can confidently proceed with analyses that reflect true farming practices and make informed decisions based on accurate data."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_emails.html#rationale",
    "href": "posts/identifying_fake_farms/filter_emails.html#rationale",
    "title": "Filtering Out Farms Associated with Invalid Emails (SQL)",
    "section": "",
    "text": "During the development and maintenance of the Litefarm platform, staff members and developers often create test accounts using emails that include “litefarm” in the address (e.g., test@litefarm.com). Farms associated with these accounts are usually not real and are created for testing or demonstration purposes. Including such farms in data analyses can lead to skewed results and misinformed conclusions."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_emails.html#implementation-using-sql",
    "href": "posts/identifying_fake_farms/filter_emails.html#implementation-using-sql",
    "title": "Filtering Out Farms Associated with Invalid Emails (SQL)",
    "section": "",
    "text": "To filter out farms associated with invalid emails, we join the users, userFarm, and farm tables to identify and exclude farms linked to users with emails containing “litefarm.” Below is the SQL query used to perform this filtering:\nSELECT f.*\nFROM farm f\nJOIN user_farms uf ON f.id = uf.farm_id\nJOIN users u ON uf.user_id = u.id\nWHERE LOWER(u.email) NOT LIKE '%litefarm%';\n\n\n\nTables Involved:\n\nusers: Contains user information, including email and id.\nuser_farm: Associates users with farms through user_id and farm_id.\nfarm: Contains farm details identified by fid.\n\nQuery Breakdown:\n\nSELECT f.*: Selects all columns from the farm table.\nJOIN \"user_farm\" uf ON f.id = uf.farm_id: Joins the farm and user_farm tables on farm_id to associate farms with users.\nJOIN users u ON uf.user_id = u.id: Joins the result with the users table on id to access user emails.\nWHERE LOWER(u.email) NOT LIKE '%litefarm%': Filters out farms where the associated user’s email contains “litefarm,” making the search case-insensitive with LOWER()."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_emails.html#benefits-of-this-strategy",
    "href": "posts/identifying_fake_farms/filter_emails.html#benefits-of-this-strategy",
    "title": "Filtering Out Farms Associated with Invalid Emails (SQL)",
    "section": "",
    "text": "Enhanced Data Integrity: Removes non-genuine farms associated with staff or test accounts.\nAccurate Analyses: Ensures that statistical analyses and reports are based on real farming data.\nResource Efficiency: Reduces the time and resources spent processing irrelevant data."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_emails.html#considerations",
    "href": "posts/identifying_fake_farms/filter_emails.html#considerations",
    "title": "Filtering Out Farms Associated with Invalid Emails (SQL)",
    "section": "",
    "text": "Multiple Users per Farm: A farm might be associated with multiple users. Ensure that the farm is only excluded if all associated users have emails containing “litefarm.”\nFalse Positives: Be cautious of legitimate users whose emails might inadvertently contain “litefarm.”"
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_emails.html#conclusion",
    "href": "posts/identifying_fake_farms/filter_emails.html#conclusion",
    "title": "Filtering Out Farms Associated with Invalid Emails (SQL)",
    "section": "",
    "text": "Filtering out farms associated with invalid emails is a vital step in maintaining the quality and reliability of our farm data. By implementing this SQL-based strategy, we can confidently proceed with analyses that reflect true farming practices and make informed decisions based on accurate data."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About This Project",
    "section": "",
    "text": "About the Farm Validation Project\nThe Farm Validation Project aims to: - Detect invalid or fake farms using advanced validation techniques. - Remove outliers to ensure unbiased and interpretable data visualizations.\nThis project is part of our initiative to create reliable datasets for decision-making and analytics.\nFor more information, visit the GitHub repository."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Farm Validation Documentation",
    "section": "",
    "text": "Welcome to Farm Validation Documentation\nThis website provides detailed insights into the process of cleaning, validating, and analyzing farm-related data. Learn more about: - Identifying Fake Farms: Techniques to detect invalid or fake farm data. - Outlier Detection and Removal: Strategies to ensure clean and interpretable data for accurate results.\nNavigate through the sections to explore the methodologies and documentation for each step.\nAbout This Project"
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_farm_names.html",
    "href": "posts/identifying_fake_farms/filter_farm_names.html",
    "title": "Filtering Out Invalid Farm Names (SQL)",
    "section": "",
    "text": "In the process of validating farm data, it’s crucial to ensure that the dataset contains only genuine entries. A lot of the times, farmers and new users, make demo farms when testing the app. Invalid or placeholder farm names can skew analyses and lead to inaccurate conclusions. One effective strategy to enhance data quality is filtering out farms with names that are likely placeholders or test entries.\n\n\nDuring data collection, especially in systems undergoing testing or user onboarding, it’s common to encounter farm names that are not real. These may include default names, test entries, or placeholders like “Test Farm,” “Demo,” or “ABC.” Including such entries in data analyses can distort results and insights.\n\n\n\nTo remove farms with invalid names, We utilize the following SQL query. This query filters out entries where the farm_name contains any of the specified substrings indicative of a test or placeholder name.\nWHERE LOWER(f.farm_name) LIKE '%fake%'\n   OR LOWER(f.farm_name) LIKE '%prueba%'\n   OR LOWER(f.farm_name) LIKE '%test%'\n   OR LOWER(f.farm_name) LIKE '%abc%'\n   OR LOWER(f.farm_name) LIKE '%123%'\n   OR LOWER(f.farm_name) LIKE '%hola%'\n   OR LOWER(f.farm_name) LIKE '%sample%'\n   OR LOWER(f.farm_name) LIKE '%demo%'\n   OR LOWER(f.farm_name) LIKE '%delete%'\n   OR LOWER(f.farm_name) LIKE '%none%'\n   OR LOWER(f.farm_name) LIKE '%dummy%'\n   OR LOWER(f.farm_name) LIKE '%wrong%'\n   OR LOWER(f.farm_name) LIKE '%not real%'\n   OR LOWER(f.farm_name) LIKE '%litefarm%'\n   OR LOWER(f.farm_name) LIKE 'ab'\n   OR LOWER(f.farm_name) LIKE '%n/a%'\n\n\n\nfake, test, sample, demo, dummy, not real: Commonly used in testing environments to denote non-real entries.\nprueba: Spanish for “test,” capturing non-English placeholder names.\nabc, 123, ab: Generic placeholders often used when real data isn’t available.\nhola: Spanish for “hello,” possibly used as a default or test entry.\ndelete, none, n/a: Entries that may have been marked for deletion or indicate missing data.\nwrong: Indicates an incorrect or placeholder entry.\nlitefarm: Might be used as a default name within the system or during demonstrations.\n\nThe LOWER() function ensures the query is case-insensitive, capturing variations like “Test” and “test.”\n\n\n\n\n\nImproved Data Quality: Eliminates non-genuine entries, leading to more accurate analyses.\nEfficiency: Reduces the noise in the dataset, making data processing and analysis more efficient.\nReliability: Enhances the trustworthiness of insights derived from the data.\n\n\n\n\nWhile this strategy is effective, it’s important to be mindful of potential false positives. For example, a legitimate farm named “ABC Ranch” would be excluded. Regularly reviewing and updating the list of filtered keywords can mitigate this risk.\n\n\n\nFiltering out invalid farm names is a simple yet powerful strategy to improve data validation. By implementing this SQL query, we ensure that our dataset reflects real-world entries, enhancing the overall quality and reliability of our analyses."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_farm_names.html#rationale",
    "href": "posts/identifying_fake_farms/filter_farm_names.html#rationale",
    "title": "Filtering Out Invalid Farm Names (SQL)",
    "section": "",
    "text": "During data collection, especially in systems undergoing testing or user onboarding, it’s common to encounter farm names that are not real. These may include default names, test entries, or placeholders like “Test Farm,” “Demo,” or “ABC.” Including such entries in data analyses can distort results and insights."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_farm_names.html#implementation-using-sql",
    "href": "posts/identifying_fake_farms/filter_farm_names.html#implementation-using-sql",
    "title": "Filtering Out Invalid Farm Names (SQL)",
    "section": "",
    "text": "To remove farms with invalid names, We utilize the following SQL query. This query filters out entries where the farm_name contains any of the specified substrings indicative of a test or placeholder name.\nWHERE LOWER(f.farm_name) LIKE '%fake%'\n   OR LOWER(f.farm_name) LIKE '%prueba%'\n   OR LOWER(f.farm_name) LIKE '%test%'\n   OR LOWER(f.farm_name) LIKE '%abc%'\n   OR LOWER(f.farm_name) LIKE '%123%'\n   OR LOWER(f.farm_name) LIKE '%hola%'\n   OR LOWER(f.farm_name) LIKE '%sample%'\n   OR LOWER(f.farm_name) LIKE '%demo%'\n   OR LOWER(f.farm_name) LIKE '%delete%'\n   OR LOWER(f.farm_name) LIKE '%none%'\n   OR LOWER(f.farm_name) LIKE '%dummy%'\n   OR LOWER(f.farm_name) LIKE '%wrong%'\n   OR LOWER(f.farm_name) LIKE '%not real%'\n   OR LOWER(f.farm_name) LIKE '%litefarm%'\n   OR LOWER(f.farm_name) LIKE 'ab'\n   OR LOWER(f.farm_name) LIKE '%n/a%'\n\n\n\nfake, test, sample, demo, dummy, not real: Commonly used in testing environments to denote non-real entries.\nprueba: Spanish for “test,” capturing non-English placeholder names.\nabc, 123, ab: Generic placeholders often used when real data isn’t available.\nhola: Spanish for “hello,” possibly used as a default or test entry.\ndelete, none, n/a: Entries that may have been marked for deletion or indicate missing data.\nwrong: Indicates an incorrect or placeholder entry.\nlitefarm: Might be used as a default name within the system or during demonstrations.\n\nThe LOWER() function ensures the query is case-insensitive, capturing variations like “Test” and “test.”"
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_farm_names.html#benefits-of-this-strategy",
    "href": "posts/identifying_fake_farms/filter_farm_names.html#benefits-of-this-strategy",
    "title": "Filtering Out Invalid Farm Names (SQL)",
    "section": "",
    "text": "Improved Data Quality: Eliminates non-genuine entries, leading to more accurate analyses.\nEfficiency: Reduces the noise in the dataset, making data processing and analysis more efficient.\nReliability: Enhances the trustworthiness of insights derived from the data."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_farm_names.html#considerations",
    "href": "posts/identifying_fake_farms/filter_farm_names.html#considerations",
    "title": "Filtering Out Invalid Farm Names (SQL)",
    "section": "",
    "text": "While this strategy is effective, it’s important to be mindful of potential false positives. For example, a legitimate farm named “ABC Ranch” would be excluded. Regularly reviewing and updating the list of filtered keywords can mitigate this risk."
  },
  {
    "objectID": "posts/identifying_fake_farms/filter_farm_names.html#conclusion",
    "href": "posts/identifying_fake_farms/filter_farm_names.html#conclusion",
    "title": "Filtering Out Invalid Farm Names (SQL)",
    "section": "",
    "text": "Filtering out invalid farm names is a simple yet powerful strategy to improve data validation. By implementing this SQL query, we ensure that our dataset reflects real-world entries, enhancing the overall quality and reliability of our analyses."
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html",
    "href": "posts/identifying_outliers/shape_analysis.html",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "",
    "text": "In modern agriculture, the geometric features of farmland play a crucial role in farm management and planning. Understanding these characteristics enables farmers to make informed decisions, manage resources more efficiently, and promote sustainable agricultural practices.\nThis research leverages data from Litefarm, an open-source agri-tech application designed to support sustainable agriculture. Litefarm provides detailed information about farmland, including field shapes, offering valuable insights for analysis. However, as an open platform, Litefarm’s database may include unrealistic or inaccurate data entries, such as “fake farms.” Cleaning and validating this data is essential for ensuring the reliability of agricultural analyses.\nIn this blog, we focus on identifying fake farms by analyzing field shapes to detect unrealistic entries. Our goal is to enhance data accuracy, providing a stronger foundation for future agriculture-related research.\n\n\n\nLitefarm Interface"
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#introduction-and-motivation",
    "href": "posts/identifying_outliers/shape_analysis.html#introduction-and-motivation",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "",
    "text": "In modern agriculture, the geometric features of farmland play a crucial role in farm management and planning. Understanding these characteristics enables farmers to make informed decisions, manage resources more efficiently, and promote sustainable agricultural practices.\nThis research leverages data from Litefarm, an open-source agri-tech application designed to support sustainable agriculture. Litefarm provides detailed information about farmland, including field shapes, offering valuable insights for analysis. However, as an open platform, Litefarm’s database may include unrealistic or inaccurate data entries, such as “fake farms.” Cleaning and validating this data is essential for ensuring the reliability of agricultural analyses.\nIn this blog, we focus on identifying fake farms by analyzing field shapes to detect unrealistic entries. Our goal is to enhance data accuracy, providing a stronger foundation for future agriculture-related research.\n\n\n\nLitefarm Interface"
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#dataset-overview-and-preparation",
    "href": "posts/identifying_outliers/shape_analysis.html#dataset-overview-and-preparation",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "2. Dataset Overview and Preparation",
    "text": "2. Dataset Overview and Preparation\n\nData Source\nThe data for this study was extracted from Litefarm’s database, which contains detailed information about farm geometries, locations, and user associations. The dataset included the following key attributes:\n\nFarm-Level Information:\nEach farm is uniquely identified by a farm_ID, representing an individual farm within the Litefarm database.\nPolygon-Level Information:\nEach farm consists of multiple polygons, corresponding to distinct areas such as fields, gardens, or barns. Each polygon is uniquely identified by a location_ID, ensuring that every area within a farm is individually traceable.\nGeometric Attributes:\n\nArea: The total surface area of the polygon.\n\nPerimeter: The boundary length of the polygon.\n\nVertex Coordinates:\nThe geographic shape of each polygon is defined by a list of vertex coordinates in latitude and longitude format, represented as: [(lat1, lon1), (lat2, lon2), ..., (latN, lonN)].\nPolygon Types:\nThe polygons in each farm are categorized into various types:\n\nFields\n\nFarm site boundaries\n\nResidences\n\nBarns\n\nGardens\n\nSurface water\n\nNatural areas\n\nGreenhouses\n\nCeremonial areas\n\n\nThis rich dataset captures farm structures and geometries comprehensively, enabling the analysis of relationships between polygon features and agricultural outcomes.\nThis study focuses specifically on productive areas—gardens, greenhouses, and fields—as these contribute directly to agricultural output. Since different polygon types possess unique geometric characteristics, we focused on a single type to maintain analytical consistency.\nAs the Litefarm database is dynamic and continuously updated, the data captured as of November 28th showed that 36.4% of farms included garden areas, 20.7% had greenhouse areas, and nearly 70% contained fields. To ensure a robust and representative analysis, we focused on field polygons, which had the highest proportion within the dataset.\n\n\nRefined Litefarm Dataset\nTo ensure that only valid and realistic farm data was included in the analysis, we applied rigorous SQL filters to the Litefarm database. These filters excluded:\n\nPlaceholder farms and internal test accounts.\n\nDeleted records.\n\nFarms located in countries with insufficient representation (fewer than 10 farms).\n\nThe table below summarizes the results of the filtering process and the composition of the cleaned dataset:\n\n\n\nDescription\nCount\n\n\n\n\nInitial number of farms in Litefarm\n3,559\n\n\nFarms after SQL filtering\n2,919\n\n\nFarms with field areas\n2,022\n\n\nFarms with garden areas\n1,063\n\n\nFarms with greenhouse areas\n607\n\n\nTotal number of field polygons\n6,340\n\n\n\nBy narrowing the focus to field polygons, we ensured that the dataset was both robust and suitable for exploring the relationship between geometric features and agricultural outcomes."
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#shape-analysis",
    "href": "posts/identifying_outliers/shape_analysis.html#shape-analysis",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "3. Shape Analysis",
    "text": "3. Shape Analysis\nThis study focuses on the geometric properties of field polygons, as these are essential for understanding farm structures and ensuring data reliability. Each field polygon is represented by a series of vertices in latitude-longitude pairs, which outline its geometric boundaries. These vertices are the foundation for calculating key metrics such as area, perimeter, and more complex shape properties.\nTo perform a robust analysis, we systematically processed and evaluated the field polygon data through the following steps:\n\n1. Vertex Distribution Analysis\nThe first step in our analysis was to examine the vertex distribution of the field polygons to understand their general characteristics and ensure data quality. A box plot was created to visualize the distribution of vertex counts: \nThe results revealed a wide range of vertex counts, spanning from 3 to 189 vertices. This variability required filtering to address potential outliers. Using the z-score method, we identified and excluded extreme values, capping the maximum vertex count at 34.\nAfter filtering, we analyzed the revised vertex distribution using a histogram, which revealed that 47.4% of field polygons had exactly four vertices:\n\n\n\nhistogram of number of veritces\n\n\n\n\n2. Validation of Area and Perimeter Metrics\n\nRecalculation Process:\n\nVertex coordinates, initially in latitude-longitude format, were transformed into a planar coordinate system (EPSG:6933) to enable precise calculations.\nArea and perimeter were computed directly from the transformed vertex data.\n\nScatter plots comparing the user-provided values with the recalculated metrics showed strong alignment, with most points clustering around the diagonal (dashed line), confirming the accuracy of the recalculated values:\n\nPerimeter Comparison\n\nArea Comparison\n\n\nThis validation step provided confidence in the accuracy of the recalculated metrics, allowing us to proceed with subsequent shape analysis using reliable data."
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#field-polygon-standardization-and-preparation",
    "href": "posts/identifying_outliers/shape_analysis.html#field-polygon-standardization-and-preparation",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "Field Polygon Standardization and Preparation",
    "text": "Field Polygon Standardization and Preparation\nTo focus on the geometric properties of field polygons, we projected all polygons into a size-and-shape space. This transformation isolates the shape and scale of the polygons while removing variations caused by rotation and translation. The size-and-shape space ensures consistent and meaningful comparisons of the underlying geometric features.\nWhile this study emphasizes polygon shapes, we recognize that area is a critical feature in agricultural studies due to its relationship with factors like regional regulations and agricultural policies. Thus, we preserved the size (scaling) component in our analysis to maintain the relevance of area.\nTo ensure uniformity and consistency in the dataset, we performed the following preprocessing steps:\n\nStandardizing Landmark Points:\n\nTo enable meaningful comparisons in the size-and-shape space, each polygon was resampled to have exactly 34 evenly spaced points along its boundary. The following Python function illustrates this process:\n\n\nCode\nimport folium\nimport json\nfrom shapely.geometry import shape, Polygon, Point, MultiPoint, MultiPolygon, LineString,LinearRing, MultiLineString\nfrom shapely.ops import unary_union, transform, nearest_points\nfrom collections import defaultdict\nimport geopy.distance\nimport pandas as pd\nimport math\nimport numpy as np\nfrom itertools import combinations\nimport itertools\nimport pyproj\nfrom functools import partial\nfrom collections import defaultdict\nimport altair as alt\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom pyproj import Transformer, CRS \nimport seaborn as sns\nimport plotly.express as px\nimport logging\nfrom shapely.validation import explain_validity\nimport geopandas as gpd\nimport ast\nfrom geographiclib.geodesic import Geodesic\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom geopy.distance import geodesic\nfrom geomstats.geometry.pre_shape import PreShapeSpace\nfrom geomstats.visualization import KendallDisk, KendallSphere\n\n\n\n\nCode\ndef resample_polygon(projected_coords, num_points=34):\n    \"\"\"\n    Resample a polygon's boundary to have a specified number of evenly spaced points.\n\n    Parameters:\n    - projected_coords: List of coordinates defining the polygon's boundary.\n    - num_points: The number of evenly spaced points to resample (default is 34).\n\n    Returns:\n    - new_coords: List of resampled coordinates.\n    \"\"\"\n    ring = LinearRing(projected_coords)\n    \n    total_length = ring.length\n\n    distances = np.linspace(0, total_length, num_points, endpoint=False)\n    \n    new_coords = [ring.interpolate(distance).coords[0] for distance in distances]\n    \n    return new_coords\n\n\n\nEnsuring Consistent Vertex Direction:\n\nAll polygons were standardized to have vertices drawn in the same direction (clockwise or counterclockwise). This step ensures that the orientation of the vertices does not introduce inconsistencies in the analysis.\n\n\nCode\ndef is_clockwise(coords):\n    \"\"\"\n    Check if the polygon vertices are in a clockwise direction.\n\n    Parameters:\n    - coords: List of coordinates defining the polygon's boundary.\n\n    Returns:\n    - True if the polygon is clockwise; False otherwise.\n    \"\"\"\n    ring = LinearRing(coords)\n    return ring.is_ccw == False \n\ndef make_clockwise(coords):\n    \"\"\"\n    Convert the polygon's vertices to a clockwise direction, if it is not \n\n    Parameters:\n    - coords: List of coordinates defining the polygon's boundary.\n\n    Returns:\n    - List of coordinates ordered in a clockwise direction.\n    \"\"\"\n    if not is_clockwise(coords):  \n        return [coords[0]] + coords[:0:-1]  # Reverse the vertex order, keeping the start point\n    return coords\n\n\nThe image illustrates four polygons that have been standardized by resampling them to have 34 evenly spaced points, with all vertices aligned in a clockwise direction.\n\n\n\nThe standardized polygon\n\n\n\nValidation of Standardization\nTo confirm the accuracy of these transformations, we compared the areas and perimeters of the resampled polygons with the original values. The results demonstrated minimal deviation, indicating the transformations preserved the integrity of the shapes.\n\nPerimeter Comparison\n\n\n\n\nperimeter comparison\n\n\n\nArea Comparison\n\n\n\n\narea comparison\n\n\nBy meeting these preprocessing requirements, we ensured that the polygons were accurately prepared for subsequent shape analysis."
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#shape-alignment-and-fréchet-mean-analysis",
    "href": "posts/identifying_outliers/shape_analysis.html#shape-alignment-and-fréchet-mean-analysis",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "Shape Alignment and Fréchet Mean Analysis",
    "text": "Shape Alignment and Fréchet Mean Analysis\nWith data preparation complete, the polygons were ready for analysis in the size-and-shape space. This specialized framework enables consistent comparison of shapes by accounting for geometric differences, including scaling, translation, and rotation. It provides a robust foundation for meaningful geometric analysis.\nThe polygons were aligned using Procrustes analysis(Dryden and Mardia 2016), and their Fréchet Mean was iteratively computed in Euclidean space. This process standardizes the shapes, ensuring variations caused by translation and rotation are removed, allowing for accurate and meaningful comparisons.\nThe Fréchet Mean(Dryden and Mardia 2016) represents the “average” shape in a geometric space (manifold), minimizing the average squared distance to all sample shapes. It serves as a standardized and central representation of the dataset.\n\n\nStep-by-Step Overview\n\nShape Alignment:\n\nThe align_shape function performs Procrustes alignment through the following steps:\n\nRemoving Translation:\n\nThe centroid (average position of all points) of each shape is computed. The shape is then centered by subtracting its centroid from all points, ensuring the shape is position-independent.\n\nRemoving Rotation:\n\nUsing Singular Value Decomposition (SVD), the optimal rotation matrix is calculated to align the target shape with the reference shape. This step removes rotation differences while preserving the relative positions of the points.\n\n\n\nMeasuring Shape Differences:\n\nThe riemannian_distance function computes the Riemannian distance between two shapes in size-and-shape space. This metric quantifies geometric differences between shapes, considering both size and rotation.\n\n\n\nRiemannian Distance in Size-and-Shape Space\nGiven two \\(k\\)-point configurations in \\(m\\)-dimensions, \\(X_1^o, X_2^o \\in \\mathbb{R}^{k \\times m}\\), the Riemannian distance(Dryden and Mardia 2016) in size-and-shape space is defined as:\n\\[\nd_S(X_1^o, X_2^o) = \\sqrt{S_1^2 + S_2^2 - 2 S_1 S_2 \\cos \\rho(X_1^o, X_2^o)}\n\\]\nwhere:\n\n\\(S_1, S_2\\): Centroid sizes of \\(X_1^o\\) and \\(X_2^o\\), representing the Frobenius norms of the centered shapes.\n\\(\\rho(X_1^o, X_2^o)\\): Riemannian shape distance.\n\nThis formula ensures that the distance captures both shape similarity and scaling differences, making it a robust tool for geometric analysis.\n\nIterative Fréchet Mean Calculation:\n\nThe algorithm begins with an initial reference shape and aligns all other shapes to it using Procrustes alignment.\nThe Fréchet Mean is then calculated as the average shape in Euclidean space.\nThe shapes are iteratively re-aligned to the updated Fréchet Mean, refining the alignment and mean calculation until convergence is achieved.\n\n\n\n\n\nPython Implementation\nThe following Python code implements the entire process of shape alignment, Riemannian distance computation, and iterative Fréchet Mean calculation.\n\n\nCode\ndef align_shape(reference_shape, target_shape):\n    \"\"\"\n    Align the target shape to the reference shape using Procrustes alignment.\n\n    Parameters:\n    - reference_shape: The reference shape to align to.\n    - target_shape: The shape to be aligned.\n\n    Returns:\n    - aligned_shape: The aligned target shape.\n    \"\"\"\n    reference_shape = np.array(reference_shape)\n    target_shape = np.array(target_shape)\n\n    # Step 1: Remove the translation\n    centroid_reference = np.mean(reference_shape, axis=0)\n    centroid_target = np.mean(target_shape, axis=0)\n    centered_reference = reference_shape - centroid_reference\n    centered_target = target_shape - centroid_target\n\n    # Step 2: Remove the rotation\n    u, s, vh = np.linalg.svd(np.matmul(np.transpose(centered_target), centered_reference))\n    r = np.matmul(u, vh)\n    aligned_shape = np.matmul(centered_target, r)\n\n    return aligned_shape\n\ndef riemannian_distance(reference_shape, target_shape):\n    \"\"\"\n    Compute the Riemannian distance between two shapes.\n\n    Parameters:\n    - reference_shape: The reference shape.\n    - target_shape: The target shape.\n\n    Returns:\n    - distance: The Riemannian distance between the shapes.\n    \"\"\"\n    reference_shape = np.array(reference_shape)\n    target_shape = np.array(target_shape)\n\n    # Step 1: Compute centroid sizes\n    S1 = np.linalg.norm(reference_shape)  \n    S2 = np.linalg.norm(target_shape)\n\n    # Step 2: Remove translation by centering the shapes\n    centered_reference = reference_shape - np.mean(reference_shape, axis=0)\n    centered_target = target_shape - np.mean(target_shape, axis=0)\n\n    # Step 3: Compute optimal rotation using SVD\n    H = np.dot(centered_target.T, centered_reference)\n    U, _, Vt = np.linalg.svd(H)\n    R = np.dot(U, Vt)\n\n    # Step 4: Align target shape\n    aligned_target = np.dot(centered_target, R)\n\n    # Step 5: Compute the Riemannian distance\n    cosine_rho = np.trace(np.dot(aligned_target.T, centered_reference)) / (S1 * S2)\n    cosine_rho = np.clip(cosine_rho, -1, 1)\n    distance = np.sqrt(S1**2 + S2**2 - 2 * S1 * S2 * cosine_rho)\n\n    return distance\n\n# Iterative Fréchet Mean Calculation\nepsilon = 1e-6  \nmax_iterations = 100  \nreference_shape = field_data['resampled_point'].iloc[0]  \naligned_shapes = []\n\n# Align all shapes to the initial reference shape\nfor target_shape in field_data['resampled_point']:\n    aligned_shape = align_shape(reference_shape, target_shape)\n    aligned_shapes.append(aligned_shape)\n\n# Initialize Euclidean space and calculate initial Fréchet Mean\neuclidean_space = Euclidean(dim=aligned_shapes[0].shape[1])\nfrechet_mean = FrechetMean(euclidean_space)\nprevious_frechet_mean_shape = frechet_mean.fit(aligned_shapes).estimate_\nconverged = False\niteration = 0\nfrechet_means = [previous_frechet_mean_shape]\n\nwhile not converged and iteration &lt; max_iterations:\n    iteration += 1\n    aligned_shapes2 = []\n    for target_shape in field_data['resampled_point']:\n        aligned_shape = align_shape(previous_frechet_mean_shape, target_shape)\n        aligned_shapes2.append(aligned_shape)\n\n    # Calculate new Fréchet Mean\n    frechet_mean = FrechetMean(euclidean_space)\n    current_frechet_mean_shape = frechet_mean.fit(aligned_shapes2).estimate_\n    frechet_means.append(current_frechet_mean_shape)\n    \n    # Check convergence\n    difference = riemannian_distance(previous_frechet_mean_shape, current_frechet_mean_shape)\n    if difference &lt; epsilon:\n        converged = True\n    else:\n        previous_frechet_mean_shape = current_frechet_mean_shape"
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#global-fréchet-mean-and-outlier-detection",
    "href": "posts/identifying_outliers/shape_analysis.html#global-fréchet-mean-and-outlier-detection",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "Global Fréchet Mean and Outlier Detection",
    "text": "Global Fréchet Mean and Outlier Detection\nHere is the global Fréchet mean calculated from all field polygons:\n\n\n\nThe global mean shape\n\n\nThe following image illustrates the original polygon and its alignment with the Fréchet mean:\n\n\n\nAligned Shape\n\n\nAfter aligning all shapes to the Fréchet mean, the riemannian_distance function was used to calculate the distances between the mean shape and each aligned shape. To identify potential outliers, the z-score method was applied to these distance values.\nBelow are the four field polygons detected as outliers using the global Fréchet mean:\n\n\nCode\nimport pandas as pd\n\n# Load the CSV file\nfour_potiential_fake_farm = pd.read_csv(\"/Users/prabhjotsingh/LiteFarm-Data-Processing-Guide/posts/identifying_outliers/data/potiential_fake_field.csv\")\n\n# Display the table\nfour_potiential_fake_farm   # Or use `data` to show the entire table\n\n\n\n\n\n\n\n\n\nFarm Number\ncountry_name\ntype\ncalculated_perimeter_m\ncalulated_area_ha\nnumber of vertices\ndistance_to_frechet_mean\nz_score\n\n\n\n\n0\nFarm 310\nUnited States\nfield\n744797.7117\n2.600780e+06\n3\n591590.0609\n48.784896\n\n\n1\nFarm 71\nCanada\nfield\n864206.5248\n4.251124e+06\n5\n709800.2531\n58.580655\n\n\n2\nFarm 45\nCanada\nfield\n341370.9916\n8.453115e+04\n5\n177371.8498\n14.459753\n\n\n3\nFarm 2792\nIndia\nfield\n200958.9993\n2.170029e+05\n4\n166440.3554\n13.553890"
  },
  {
    "objectID": "posts/identifying_outliers/shape_analysis.html#fréchet-mean-shape-by-country",
    "href": "posts/identifying_outliers/shape_analysis.html#fréchet-mean-shape-by-country",
    "title": "Farm Shape Analysis: Linking Geometry with Crop Yield and Diversity",
    "section": "Fréchet Mean Shape by Country",
    "text": "Fréchet Mean Shape by Country\nThe shape of field polygons varies significantly across different countries. To capture this variation, we calculated the Fréchet mean shape* for each country based on the fields located within that specific country.\nThe plot below summarizes the Fréchet mean shapes for all countries in the dataset.\nIn this visualization, different colors represent different continents. It is evident that both the shapes and areas of the field polygons differ substantially across regions, highlighting the diversity in field geometry across countries.\n\n\n\nSummary of Countries’ Mean Shapes\n\n\n\nAssessing Mean Shape Representation in Countries with Limited Data\nTo evaluate the representativeness of the mean shape, we specifically selected countries with fewer than 10 polygons. The small number of polygons in these cases allows for easier visualization, helping us assess whether the mean shape effectively captures the overall geometric characteristics of these datasets.\n\nZambia\n\n\n\nField polygons and Fréchet mean for Zambia\n\n\n\n\nChile\n\n\n\nField polygons and Fréchet mean for Chile\n\n\nFrom the above plots, we can draw the following conclusions:\n\nEffective Representation with Similar Shapes:\nWhen the field polygons within a country have similar shapes, the calculated Fréchet mean serves as an effective representation of the general shape trend.\nLimitations with Diverse Shapes:\nIf the field polygons within a country show significant variation in their shapes, the Fréchet mean becomes less representative and may fail to adequately capture the geometric diversity of the dataset.\n\n\n\n\nDetecting Potential Fake Field Polygons\nBuilding on the country-level mean shape analysis, we applied the same methodology to detect potential fake field polygons. For each country, field polygons were aligned to their corresponding Fréchet mean, and the z-score technique was used to identify anomalies based on the distances between each polygon and the mean shape.\nThrough this analysis, we identified 51 potential fake field polygons. To verify their validity, we visualized each field polygon on satellite imagery. The results are summarized in the plot below:\n\nGray markers: Fake fields\n\nPink markers: True fields\n\nOrange markers: Potential fake fields\n\n\n\n\nSatellite plot for all 51 potential fake fields\n\n\nAfter visualizing all 51 potential fake field polygons, the findings were as follows:\n\n45.1% were confirmed as fake fields.\n\n29.4% were ambiguous, meaning they could potentially be either fake or real fields, requiring further investigation.\n25.5% were determined to be true fields.\n\nBelow are examples of confirmed fake fields. These polygons often exhibit:\n\nUnusual geometric shapes\nSizes that are disproportionately large compared to neighboring field polygons\n\n\n\n\nfake field polygons\n\n\n\n\nFuture Work\nOur analysis successfully identified a significant number of potential fake field polygons, with nearly half of these cases being validated as genuinely fake. While this demonstrates the effectiveness of our approach, there is still room to improve the accuracy and reliability of the detection process. To further refine our results, future efforts will focus on:\n\nIncorporate Geographic Information:\nEnrich the dataset with geographic features such as proximity to natural landmarks (e.g., mountains, rivers) or man-made structures (e.g., urban areas, roads). These features could provide valuable context for improving the calculation of the Fréchet mean and detecting anomalies more effectively.\nImprove Outlier Detection Methods:\nLeverage advanced machine learning models, such as clustering algorithms or ensemble methods, to identify subtle patterns and relationships that may indicate fake fields. Techniques like unsupervised learning or deep anomaly detection could also be explored to improve performance."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "This strategy helps to calculate the total area of farms and determine their precise centroid coordinates. This approach addresses discrepancies between the farm’s initial location and the actual mapped areas within the farm, enhancing the reliability of spatial analyses.\n\n\n\nWhen users create a farm, they can set the farm’s location by providing an address, entering coordinates, or dropping a pin on the map. However, during the mapping workflow, users might draw the farm map (fields, gardens, etc.) in separate or multiple locations. This discrepancy can lead to significant differences between the initially set location and the actual mapped areas.\nWe observed instances where the centroid calculated from mapped areas and the user-provided location differed by over 25 km. While this does not indicate fraudulent farm entries, it highlights cases where multiple significant locations (e.g., fields, gardens) were grouped under one farm name and farm ID.\nThese discrepancies can impact spatial analyses, such as identifying the closest metropolitan area to a farm, evaluating farm diversity, or assessing environmental influences.\n\n\n\n\n\n\nWe utilized the following data sources:\n\nFarm Data: General information about the farm, including user-inputted grid points.\nMapped Areas: Polygon data representing fields, gardens, and other regions within the farm.\nLocation Data: Associated coordinates of mapped farm areas.\n\n\n\n\n\nParse Coordinates:\n\nConvert any string representations of coordinates into a structured list for further analysis.\n\nCompute Centroid:\n\nCalculate the centroid for areas marked as “Farm Site Boundary” if available.\nIf no “Farm Site Boundary” exists, aggregate coordinates from all mapped areas (e.g., fields, gardens) to compute a cumulative centroid.\n\nDistance Analysis:\n\nCompare the centroid of the mapped areas with the initial user-provided location (grid_points).\nCalculate distances between these two points using geospatial methods and classify farms based on proximity:\n\nWithin 500m, 1km, 5km, 10km, and 15km.\nBeyond 15km and 25km.\n\n\nData Output:\n\nGenerate a refined dataset containing the farm ID, centroid coordinates, user-provided grid points, and calculated distances.\n\n\n\n\n\n\n\n\nCentroid Discrepancy:\n\nSome farms showed centroid-to-user-location distances exceeding 25 km.\nThis indicates that users grouped multiple separate significant areas under a single farm ID.\n\nOutlier Farms:\n\nFarms with large discrepancies between their centroid and user-provided locations were flagged as outliers.\nThese farms are not considered fraudulent but represent unique cases with dispersed mapped areas.\n\n\n\n\n\n\n\nImproved Spatial Accuracy:\n\nAllows for precise identification of farm locations based on actual mapped areas.\n\nFlexible Analysis Options:\n\nEnables researchers to select either user-provided coordinates or computed centroids, depending on the analysis.\n\nEnhanced Data Integrity:\n\nHighlights outlier cases for further review, ensuring better understanding of farm spatial distributions.\n\n\n\n\n\n\n\nData Quality:\n\nRelies on accurate user mappings. Errors in mapped data can affect the centroid calculations.\n\nOutlier Handling:\n\nOutlier farms may require manual review for specific analyses.\n\nComputational Resources:\n\nHandling large datasets with complex geometries may require significant computational power.\n\n\n\n\n\n\nThis approach reconciles differences between initial farm locations and actual mapped areas, providing a comprehensive spatial representation of farms. While outlier farms with significant centroid-to-user-location discrepancies are noted, they are still valid entries, representing unique spatial distributions. This refined spatial data improves the accuracy and reliability of analyses involving farm proximity, urban interactions, and geographic diversity."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html#rationale",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html#rationale",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "When users create a farm, they can set the farm’s location by providing an address, entering coordinates, or dropping a pin on the map. However, during the mapping workflow, users might draw the farm map (fields, gardens, etc.) in separate or multiple locations. This discrepancy can lead to significant differences between the initially set location and the actual mapped areas.\nWe observed instances where the centroid calculated from mapped areas and the user-provided location differed by over 25 km. While this does not indicate fraudulent farm entries, it highlights cases where multiple significant locations (e.g., fields, gardens) were grouped under one farm name and farm ID.\nThese discrepancies can impact spatial analyses, such as identifying the closest metropolitan area to a farm, evaluating farm diversity, or assessing environmental influences."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html#implementation-strategy",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html#implementation-strategy",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "We utilized the following data sources:\n\nFarm Data: General information about the farm, including user-inputted grid points.\nMapped Areas: Polygon data representing fields, gardens, and other regions within the farm.\nLocation Data: Associated coordinates of mapped farm areas.\n\n\n\n\n\nParse Coordinates:\n\nConvert any string representations of coordinates into a structured list for further analysis.\n\nCompute Centroid:\n\nCalculate the centroid for areas marked as “Farm Site Boundary” if available.\nIf no “Farm Site Boundary” exists, aggregate coordinates from all mapped areas (e.g., fields, gardens) to compute a cumulative centroid.\n\nDistance Analysis:\n\nCompare the centroid of the mapped areas with the initial user-provided location (grid_points).\nCalculate distances between these two points using geospatial methods and classify farms based on proximity:\n\nWithin 500m, 1km, 5km, 10km, and 15km.\nBeyond 15km and 25km.\n\n\nData Output:\n\nGenerate a refined dataset containing the farm ID, centroid coordinates, user-provided grid points, and calculated distances."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html#key-observations",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html#key-observations",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "Centroid Discrepancy:\n\nSome farms showed centroid-to-user-location distances exceeding 25 km.\nThis indicates that users grouped multiple separate significant areas under a single farm ID.\n\nOutlier Farms:\n\nFarms with large discrepancies between their centroid and user-provided locations were flagged as outliers.\nThese farms are not considered fraudulent but represent unique cases with dispersed mapped areas."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html#benefits-of-this-strategy",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html#benefits-of-this-strategy",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "Improved Spatial Accuracy:\n\nAllows for precise identification of farm locations based on actual mapped areas.\n\nFlexible Analysis Options:\n\nEnables researchers to select either user-provided coordinates or computed centroids, depending on the analysis.\n\nEnhanced Data Integrity:\n\nHighlights outlier cases for further review, ensuring better understanding of farm spatial distributions."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html#considerations",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html#considerations",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "Data Quality:\n\nRelies on accurate user mappings. Errors in mapped data can affect the centroid calculations.\n\nOutlier Handling:\n\nOutlier farms may require manual review for specific analyses.\n\nComputational Resources:\n\nHandling large datasets with complex geometries may require significant computational power."
  },
  {
    "objectID": "posts/identifying_outliers/farm_centroid_outliers.html#conclusion",
    "href": "posts/identifying_outliers/farm_centroid_outliers.html#conclusion",
    "title": "Calculating Farm Area and Centroid for Enhanced Spatial Analysis",
    "section": "",
    "text": "This approach reconciles differences between initial farm locations and actual mapped areas, providing a comprehensive spatial representation of farms. While outlier farms with significant centroid-to-user-location discrepancies are noted, they are still valid entries, representing unique spatial distributions. This refined spatial data improves the accuracy and reliability of analyses involving farm proximity, urban interactions, and geographic diversity."
  }
]